
https://www.geeksforgeeks.org/program-find-minimum-maximum-element-array/
int maximum=-100;
void getmax(int i,int last,int arr[])
{   
    if(i<=last)
    {
       arr[i]>maximum?getmax(i=i+1,last,arr):i=i+1;
    }
    
}

int main()
{
     int arr[] = { 12, 1234, 45, 67, 1 };
    getmax(0,4,arr);
    cout<<maximum<<endl;

    return 0;
}



https://www.geeksforgeeks.org/sum-triangle-from-array/

int s[5]={0};
void recur(int k,int last,int arr[])
{
    if(k<=last)
    {
         s[k]=s[k]+s[k+1];
         cout<<s[k]<<" ";
         k++;
         recur(k,last,arr);
    }
}

int main()
{
     int arr[5] = { 1,2,3,4,5};
    int i=0;
    for(auto &val:arr)
    {  s[i]=arr[i];
        cout<<s[i]<<" ";
        i++;
    }
    cout<<endl;
    // cout<<"after\n";
    
    int last=3;
    for(int j=1;j<=4;j++)
    {
        recur(0,last,arr);
        last--;
        cout<<endl;
    }

    return 0;
}


//sort an array using recusrion

void insert(vector <int>& v,int temp)
{
    if(v.size()==0 || v[v.size()-1]<=temp)
    {
        v.push_back(temp);
        return ;
    }
    int value=v[v.size()-1];
    v.pop_back();
    insert(v,temp);
    v.push_back(value);
    
}

void sort(vector <int>& v)
{
    if(v.size()==1)
    {
        return ;
    }
    int temp=v[v.size()-1];
    v.pop_back();
    sort(v);
    insert(v,temp);
}

int main()
{
    
    int n;
    cout<<"Enter the number of elements \n";
    cin>>n;
   vector <int> v;
   for(int i=0;i<n;i++)
   {
       int x;
       cin>>x;
       v.push_back(x);
   }
   sort(v);
   cout<<"After sort \n";
   for(auto &val:v)
   {
       cout<<val<<" ";
   }
   

    return 0;
}

//sort a stack using recursion 

void insert( stack<int> &stack,int temp)
{
    if(stack.size()==1 || stack.top()<=temp)
    {
        stack.push(temp);
        return ;
    }
    int value=stack.top();
    stack.pop();
    insert(stack,temp);
    stack.push(temp);
}

void sort( stack<int> &stack)
{
    if(stack.top()==1)
    {
        return ;
    }
    int temp=stack.top();
    stack.pop();
    sort(stack);
    insert(stack,temp);
}


int main()
{
    
    int n;
    cout<<"Enter number of elements \n";
    cin>>n;
     stack<int> stack;
    for(int i=0;i<n;i++)
    {  cout<<"Enter a number \n";
        int x;
        cin>>x;
        stack.push(x);
    }
    
    sort(stack);

  //deleting middle element of a stack
  
  void solve(stack <int>& stack,int k)
{
if(stack.top()==-1)
{
    return ;
}
if(k==1)
{
    stack.pop();
    return ;
}
int value=stack.top();
stack.pop();
solve(stack,k-1);
stack.push(value);

}

int main()
{
    
    int n;
    cout<<"Enter number of elements \n";
    cin>>n;
     stack<int> stack;
    for(int i=0;i<n;i++)
    {  cout<<"Enter a number \n";
        int x;
        cin>>x;
        stack.push(x);
    }
    
  solve(stack,floor(n/2)+1);
  
   
   //Reverse a stack using recursion
   void insert( stack<int> &stack,int temp)
{
    if(stack.size()==0)
    {
        stack.push(temp);
        return ;
    }
    int value=stack.top();
    stack.pop();
    insert(stack,temp);
    stack.push(value);
    return ;
}

void reverse(stack<int> &stack)
{
    if(stack.size()==0 || stack.size()==1)
    {
        return ;
    }
    int temp=stack.top();
    stack.pop();
    reverse(stack);
    insert(stack,temp);
}

int main()
{
    
    int n;
    cout<<"Enter number of elements \n";
    cin>>n;
     stack<int> stack;
    for(int i=0;i<n;i++)
    {  cout<<"Enter a number \n";
        int x;
        cin>>x;
        stack.push(x);
    }
    
  reverse(stack);
  
   cout<<stack.top();

    return 0;
}


// print all subsets using recursion 

void solve(string ip,string op)
{
    if(ip.length()==0)
    {
        cout<<op<<" ";
        return;
    }
    string op1=op;
    string op2=op;
    op2.push_back(ip[0]);
    ip.erase(ip.begin()+0);
    solve(ip,op1);
    solve(ip,op2);
    
}


int main()
{
  string ipt,otpt="";
  cout<<"Enter input string \n";
  cin>>ipt;
  
  solve(ipt,otpt);

    return 0;
}




# print all unique subsets 


void solve(string ip,string op, vector<string>& subset)
{
    if(ip.length()==0)
    {
       subset.push_back(op);
        return;
    }
    string op1=op;
    string op2=op;
    op2.push_back(ip[0]);
    ip.erase(ip.begin()+0);
    solve(ip,op1,subset);
    solve(ip,op2,subset);
    return ;
    
}


int main()
{
  string ipt,otpt="";
  cout<<"Enter input string \n";
  cin>>ipt;
  vector<string> unique;
  vector<string> subset;
  map<string,int>m;
  solve(ipt,otpt,subset);
  
  for(auto &val:subset)
  {
      m[val]++;
  }
  
  for(auto &val:m)
  {
     
          unique.push_back(val.first);
      
  }
  for(auto &val:unique)

{
    cout<<val<<" ";
}
    return 0;
}


# Permutation with spaces


void solve(string ip,string op)
{
  if(ip.length()==0)
  {
      cout<<op<<" ";
      return ;
  }
  
  string op1=op,op2=op;
  op1.push_back(' ');
  op1.push_back(ip[0]);
  op2.push_back(ip[0]);
  ip.erase(ip.begin()+0);
  solve(ip,op1);
  solve(ip,op2);
  
}


int main()
{
   string ip,op;
   cout<<"Enter ip string \n";
   cin>>ip;
   op.push_back(ip[0]);
   ip.erase(ip.begin()+0);
   solve(ip,op);
    
    return 0;
}


#permutation case change 

void solve(string ip,string op)
{
  if(ip.length()==0)
  {
      cout<<op<<" ";
      return ;
  }
  
  string op1=op,op2=op;
  op1.push_back(ip[0]);
  op2.push_back(ip[0]-32);
  ip.erase(ip.begin()+0);
  solve(ip,op1);
  solve(ip,op2);
  
}


int main()
{
   string ip,op;
   cout<<"Enter ip string \n";
   cin>>ip;
   solve(ip,op);
    
    return 0;
}


//letter case change permutation 

void solve(string ip,string op)
{
    if(ip.length()==0)
    {
        cout<<op<<" ";
        return ;
    }
    
    string op1=op,op2=op;
    if(isalpha(ip[0]))
    {
       op1.push_back(tolower(ip[0]));
       op2.push_back(toupper(ip[0]));
       ip.erase(ip.begin()+0);
       solve(ip,op1);
       solve(ip,op2);
    }
    else 
    {
      op1.push_back(ip[0]);
      ip.erase(ip.begin()+0);
      solve(ip,op1);
    }
    
    
}


int main()
{
string ip,op=" ";
cout<<"Enter a string \n";
cin>>ip;
solve(ip,op);
     

    return 0;
}



#genearte balanced parenthesis

void solve(int open,int close,vector <string> &v,string op)
{
    if(open==0 && close==0)
    {
        v.push_back(op);
        return ;
    }
    if(open!=0)
    {
        string op1=op;
        op1.push_back('(');
        // open=open-1;
        solve(open-1,close,v,op1);
    }
    if(close>open)
    {
        string op2=op;
        op2.push_back(')');
        // close=close-1;
        solve(open,close-1,v,op2);
    }
    return ;
    
}

vector<string> para(int n)
{
    vector<string> v;
    int open=n,close=n;
    string op=" ";
    solve(open,close,v,op);
    return v;
}


int main()
{
int n;
cout<<"Enter n \n";
cin>>n;
vector<string> x=para(n);
para(n);
     
     for(auto &val:x)
     {
         cout<<val<<" ";
     }

    return 0;
}


#print n digit binary numbe rsuch that each of which prefixes have no of 1's greater than 0's
void solve(int n,int one,int zero,string op)
{
    if(n==0)
    {
        cout<<op<<" ";
        return ;
    }

        string op1=op;
        op1.push_back('1');
        solve(n-1,one+1,zero,op1);

    if(one>zero)
    {
        string op2=op;
        op2.push_back('0');
        solve(n- 1,one,zero+ 1,op2);
    }
    return ;
}

int main()
{
int n,one=0,zero=0;
cout<<"Enter n \n";
cin>>n;
string op=" ";
solve(n,one,zero,op);


    return 0;
}


# added josephus problem

void solve(vector<int>& v,int k,int index)
{
    if(v.size()==1)
    {
        cout<<v[0];
        return ;
    }
    
    index=(index+k)%v.size();
    auto it=v.begin()+index;
    v.erase(it);
    solve(v,k,index);
   
}

int main()
{

int n,k,index=0;
vector<int> v;
cout<<"Enter n and k \n";
cin>>n>>k;
k--;
for(int i=1;i<=n;i++)
{  
    v.push_back(i);
}
solve(v,k,index);


    return 0;
}



//print any one subset with sum k

bool solve(int index,int arr[],int n,int count,int sum,vector<int>& v)
{
    if(index==n)
    {
        if(count==sum)
        {
            for(auto &val:v)
            {
                cout<<val<<" ";
            }
            cout<<endl;
            return true;
        }
        return false;
    }
    v.push_back(arr[index]);
    if(solve(index+1,arr,n,count,sum+arr[index],v)==true)
    {
        return true;
    }
    v.pop_back();
    if(solve(index+1,arr,n,count,sum,v)==true)
    {
        return true;
    }
    return false ;
    
}


int main()
{
    int arr[3]={1,2,1};
    int n=3;
    int count=2;
    vector<int> v;
    cout<<solve(0,arr,n,count,0,v);

    return 0;
}


